server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/}

spring:
  application:
    name: mssus-account-service
    
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
    
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/mssus_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: ${JPA_FORMAT_SQL:true}
        show_sql: ${JPA_SHOW_SQL:false}
        jdbc:
          batch_size: ${JPA_BATCH_SIZE:20}
        order_inserts: true
        order_updates: true
    open-in-view: false
    
  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    locations: classpath:db/migration
    validate-on-migrate: true
    
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:20MB}
      enabled: true
      
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: ${APP_TIMEZONE:UTC}
    date-format: yyyy-MM-dd'T'HH:mm:ss'Z'

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour in milliseconds
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds

# Application Configuration
app:
  version: ${APP_VERSION:1.0.0}
  file:
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}
    max-size: ${FILE_MAX_SIZE:10485760} # 10MB in bytes
  
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}
  
  security:
    password:
      min-length: ${PASSWORD_MIN_LENGTH:8}
      require-uppercase: ${PASSWORD_REQUIRE_UPPERCASE:true}
      require-lowercase: ${PASSWORD_REQUIRE_LOWERCASE:true}
      require-digit: ${PASSWORD_REQUIRE_DIGIT:true}
      require-special: ${PASSWORD_REQUIRE_SPECIAL:false}
    
    otp:
      length: ${OTP_LENGTH:6}
      expiry-minutes: ${OTP_EXPIRY_MINUTES:5}
      max-attempts: ${OTP_MAX_ATTEMPTS:3}
    
    rate-limit:
      enabled: ${RATE_LIMIT_ENABLED:true}
      login-attempts: ${LOGIN_MAX_ATTEMPTS:5}
      login-window-minutes: ${LOGIN_WINDOW_MINUTES:15}
      register-attempts: ${REGISTER_MAX_ATTEMPTS:3}
      register-window-minutes: ${REGISTER_WINDOW_MINUTES:60}
  
  features:
    email-verification: ${FEATURE_EMAIL_VERIFICATION:true}
    phone-verification: ${FEATURE_PHONE_VERIFICATION:true}
    student-verification: ${FEATURE_STUDENT_VERIFICATION:true}
    driver-verification: ${FEATURE_DRIVER_VERIFICATION:true}
    wallet-enabled: ${FEATURE_WALLET:true}
    
  validation:
    phone-regex: ${PHONE_REGEX:^(\\+84|0)[0-9]{9,10}$}
    email-regex: ${EMAIL_REGEX:^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$}
    plate-number-regex: ${PLATE_REGEX:^[0-9]{2}[A-Z]{1,2}[-\\s]?[0-9]{4,5}(\\.[0-9]{2})?$}

# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.mssus.account: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.web: ${LOG_LEVEL_WEB:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE:./logs/mssus-account.log}
    max-size: ${LOG_MAX_SIZE:10MB}
    max-history: ${LOG_MAX_HISTORY:30}

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
      base-path: /actuator
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}
  metrics:
    export:
      prometheus:
        enabled: ${METRICS_PROMETHEUS_ENABLED:false}

# Springdoc OpenAPI Configuration  
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: ${SWAGGER_ENABLED:true}
  swagger-ui:
    path: /swagger-ui.html
    enabled: ${SWAGGER_UI_ENABLED:true}
    try-it-out-enabled: ${SWAGGER_TRY_IT_OUT:true}
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: false
